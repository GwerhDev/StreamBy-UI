/* Container for the entire read-only view */
.container {
  width: 100%;
  font-family: 'SF Mono', 'Consolas', 'Menlo', monospace;
  font-size: 14px;
  border-radius: 8px;
}

/* A single key-value pair row */
.fieldItem {
  display: grid;
  /* Key column adjusts to its content, value column takes the rest */
  grid-template-columns: max-content 1fr;
  gap: 1.5rem; /* Increased gap for better separation */
  align-items: start;
  padding: 0.75rem 0;
  border-bottom: 1px solid var(--color-dark-100);
}

.container > .fieldItem:last-child {
  border-bottom: none;
}

/* Base style for the key/index part */
.keyBase {
  word-break: normal; /* Avoid breaking keys unless necessary */
  text-align: left; /* Align left for variable widths */
  font-weight: 500;
  color: var(--color-light-400);
}

/* Style for object keys */
.fieldKey {
  composes: keyBase;
}

/* Style for array indices */
.arrayIndex {
  composes: keyBase;
  color: var(--color-light-500);
  font-style: italic;
}

/* The value part of a key-value pair */
.fieldValue {
  word-break: break-all;
  white-space: pre-wrap;
}

/* Style different primitive types */
.stringValue { color: #9ccc65; }
.numberValue { color: #64b5f6; }
.booleanValue { color: #ff8a65; font-weight: bold; }
.nullValue { color: #e57373; font-style: italic; }
.emptyValue { color: var(--color-light-500); }

/* Indent nested blocks (objects or arrays) */
.nestedObject {
  /* The grid layout on fieldItem handles the alignment */
}

/* Remove container styles from nested views */
.nestedObject .container {
  background-color: transparent;
  border: none;
  border-radius: 0;
  padding: 0;
}

/* Don't add a border to the last item in a nested block */
.nestedObject .fieldItem:last-child {
  border-bottom: none;
}
